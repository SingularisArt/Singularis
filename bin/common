#!/usr/bin/env bash

BOLD='\033[0;1m'
WHITE='\033[0;97m'
BLUE='\033[0;34m'
GREEN='\033[1;32m'
PURPLE='\033[1;35m'
RED='\033[1;31m'
RESET='\033[0m'
YELLOW='\033[1;33m'
BLACK='\033[0;30m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
LIGHTGRAY='\033[0;37m'
GRAY='\033[0;90m'

LIGHTRED='\033[0;91m'
LIGHTGREEN='\033[0;92m'
LIGHTYELLOW='\033[0;93m'
LIGHTBLUE='\033[0;94m'
LIGHTMAGENTA='\033[0;95m'
LIGHTCYAN='\033[0;96m'

BOLDBLACK="\e[1;$BLACK"
BOLDRED="\e[1;$RED"
BOLDGREEN="\e[1;$GREEN"
BOLDYELLOW="\e[1;$YELLOW"
BOLDBLUE="\e[1;$BLUE"
BOLDMAGENTA="\e[1;$MAGENTA"
BOLDCYAN="\e[1;$CYAN"
BOLDLIGHTGRAY="\e[1;$LIGHTGRAY"
BOLDGRAY="\e[1;$GRAY"
BOLDLIGHTRED="\e[1;$LIGHTRED"
BOLDLIGHTGREEN="\e[1;$LIGHTGREEN"
BOLDLIGHTYELLOW="\e[1;$LIGHTYELLOW"
BOLDLIGHTBLUE="\e[1;$LIGHTBLUE"
BOLDLIGHTMAGENTA="\e[1;$LIGHTMAGENTA"
BOLDLIGHTCYAN="\e[1;$LIGHTCYAN"
BOLDWHITE="\e[1;$WHITE"

ITALICBLACK="\e[1;$BLACK"
ITALICRED="\e[1;$RED"
ITALICGREEN="\e[1;$GREEN"
ITALICYELLOW="\e[1;$YELLOW"
ITALICBLUE="\e[1;$BLUE"
ITALICMAGENTA="\e[1;$MAGENTA"
ITALICCYAN="\e[1;$CYAN"
ITALICLIGHTGRAY="\e[1;$LIGHTGRAY"
ITALICGRAY="\e[1;$GRAY"
ITALICLIGHTRED="\e[1;$LIGHTRED"
ITALICLIGHTGREEN="\e[1;$LIGHTGREEN"
ITALICLIGHTYELLOW="\e[1;$LIGHTYELLOW"
ITALICLIGHTBLUE="\e[1;$LIGHTBLUE"
ITALICLIGHTMAGENTA="\e[1;$LIGHTMAGENTA"
ITALICLIGHTCYAN="\e[1;$LIGHTCYAN"
ITALICWHITE="\e[1;$WHITE"

LOG_LEVEL_EMERGENCY=10
LOG_LEVEL_ALERT=10
LOG_LEVEL_CRITICAL=10
LOG_LEVEL_ERROR=10
LOG_LEVEL_WARNING=10
LOG_LEVEL_NOTICE=10
LOG_LEVEL_INFO=10
LOG_LEVEL_DEBUG=10

LOG_LEVEL=$LOG_LEVEL_INFO



log_debug() {
  if [[ $LOG_LEVEL -ge $LOG_LEVEL_DEBUG ]]; then
    echo -e "$PURPLE[debug]  $RESET $*" > /dev/stderr
  fi
}

log_error() {
  if [[ $LOG_LEVEL -ge $LOG_LEVEL_ERROR ]]; then
    echo -e "$RED[error]  $RESET $*" > /dev/stderr
  fi
}

log_info() {
  if [[ $LOG_LEVEL -ge $LOG_LEVEL_INFO ]]; then
    echo -e "$BOLD[info]   $RESET $*" > /dev/stderr
  fi
}

log_notice() {
  if [[ $LOG_LEVEL -ge $LOG_LEVEL_NOTICE ]]; then
    echo -e "$GREEN[notice] $RESET $*" > /dev/stderr
  fi
}

log_warn() {
  if [[ $LOG_LEVEL -ge $LOG_LEVEL_WARNING ]]; then
    echo -e "$YELLOW[warning]$RESET $*" > /dev/stderr
  fi
}

####################
# Dependency check #
####################

install_yay() {
  check_if_installed "git"

  cd /opt || exit
  sudo git clone https://aur.archlinux.org/yay-git.git
  sudo chown -R "$USER":"$USER" ./yay-git
  cd yay-git || exit
  makepkg -si || sudo pacman -Sy base-devel && makepkg -si
}

check_if_installed () {
  if ! which "${1}" >/dev/null 2>&1 && ! pacman -Qq "${1}" >/dev/null 2>&1; then
    log_error "You don't have [${1}] installed!"
    read -r -p "Do you want to install it [y/n]: " install

    case $install in
      "y")
        if [[ "${1}" = "yay" ]]; then
          install_yay
        else
          check_if_installed "yay"
          yay -S "${1}"
        fi;;
      "n")
        exit;;
    esac
  else
    return
  fi
}

##################
# Sourcing files #
##################

source_install_script () {
  script_location="$INSTALL_SCRIPTS/${1}"
  bash "$script_location" "${@}"
}

check_if_arg_is_a_command () {
  arg="${1}"

  if [[ "${arg:0:2}" = "--" ]]; then
    exit
  fi
}

#########################
# Install Configuration #
#########################

install_config() {
  config_name=$1
  config_path=$2
  config_install_path=$3

  if [[ -d $config_install_path ]]; then
    while true; do
      read -p "$config_name's config already exists in $config_install_path. Do you want to overwrite it: " confirmation
      case $confirmation in
        "y")
          rm -rf "$config_install_path"
          ln -sf "$config_path" "$config_install_path"
          break
          ;;
        "n")
          break
          ;;
        *)
          log_error "Invalid Input"
          ;;
      esac
    done
  fi
}
