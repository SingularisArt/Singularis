global !p

from builtin import choose_next
from latex_.scopes import math, not_unit

plus_minus = ['\\pm', '\\mp']

endglobal

#######################################################################
#                                                                     #
#                            Big Operator                             #
#                                                                     #
#######################################################################


# sum -> \sum_{i=1}^{\infty} f(x)
# prod -> \prod_{i=1}^{\infty} f(x)
context "math()"
snippet "(prod|sum)" "Product or Summation" rA
\\`!p snip.rv = match.group(1)`_{${1:i=1}}^{${2:\infty}} ${3:f(x)}
endsnippet

# int   -> \int_{x}^{\infty} f(x)
# iint  -> \iint_{x}^{\infty} f(x)
# iiint -> \iiint_{x}^{\infty} f(x)
context "math()"
snippet "(int|iint|iiint)" "Limit" rA
\\`!p snip.rv = match.group(1)`_{${1:x}}^{${2:\infty}} ${3:f(x)}
endsnippet

# lim -> \lim_{x \to \infty} f(x)
context "math()"
snippet lim "Limit" A
\lim_{${1:x} \to ${2:\infty}} ${3:f(x)}
endsnippet


#######################################################################
#                                                                     #
#                           Binary Operator                           #
#                                                                     #
#######################################################################


# xx -> \times
context "math()"
snippet xx "Multiply" Aw
\times
endsnippet

# cxx -> \cdot
context "math()"
snippet cxx "Dot Product" Aw
\cdot
endsnippet

# div -> \div
context "math()"
snippet div "Devide" Aw
\div
endsnippet

# +- -> \pm
context "math()"
snippet +- "Plus Minus" Ai
\pm
endsnippet

# -+ -> \mp
context "math()"
snippet -+ "Minus Plus" Ai
\mp
endsnippet

# \pm -> \mp
# \mp -> \pm
context "math()"
snippet "(\\(pm|mp))" "Plus Minus Transformation" ir
`!p
snip.rv = choose_next(match.group(1), plus_minus, 2)
`
endsnippet


#######################################################################
#                                                                     #
#                              Fractions                              #
#                                                                     #
#######################################################################


# // -> \frac{}{}
context "math()"
snippet // "Fraction" iA
\\frac{${VISUAL}$1}{$2}$0
endsnippet

# 4\pi/ -> \frac{4\pi}{}
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

# (4\pi \times 1)/ -> \frac{4\pi \times 1}{}
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet


#######################################################################
#                                                                     #
#                              Functions                              #
#                                                                     #
#######################################################################


# sin    -> \sin
# cos    -> \cos
# tan    -> \tan
# ln     -> \ln
# lg     -> \lg
# log    -> \log
# max    -> \max
# min    -> \min
# arg    -> \arg
# det    -> \det
# exp    -> \exp
# csc    -> \csc
# sec    -> \sec
# arcsin -> \arcsin
# arccos -> \arccos
# arctan -> \arctan
# sinh   -> \sinh
# cosh   -> \cosh
# tanh   -> \tanh
# cot    -> \cot
# coth   -> \coth
# gcd    -> \gcd
context "math()"
snippet "\\?\b(sin|cos|tan|ln|lg|log|max|min|arg|det|exp|csc|sec|arcsin|arccos|arctan|sinh|cosh|tanh|cot|coth|gcd)" "Common Function" Ar
`!p
snip.rv = '\\' + match.group(1)
`
endsnippet

# fofx -> f(x) = x
context "math()"
snippet '([a-zA-Z])of([a-zA-Z])' "Create Function" rwA
`!p snip.rv = match.group(1)`(`!p snip.rv = match.group(2)`) = ${1:`!p snip.rv = match.group(2)`}
endsnippet

# fof<x,y,z> -> f(x,y,z) = x,y,z
context "math()"
snippet '(.)of\<(.*?)\>' "Create Function" rwA
`!p snip.rv = match.group(1)`(`!p snip.rv = match.group(2)`) = ${1:`!p snip.rv = match.group(2)`}
endsnippet

# fun -> f \:  \mathbb{R} \to \mathbb{R} \:
context "math()"
snippet fun "F something Subset of R" iA
f : $1 \subset \mathbf{R} \to \mathbf{R} : $2
endsnippet
