# NOTE: THis file is automatically generated by pywal. Do not edit it by hand.

[global]
  font = Hack Nerd Font 10

  # The format of the message.  Possible variables are:
  #   %a  appname
  #   %s  summary
  #   %b  body
  #   %i  iconname (including its path)
  #   %I  iconname (without its path)
  #   %p  progress value if set ([  0%] to [100%]) or nothing
  # Markup is allowed
  format = "<b>%s</b>\n%b\n%p"
  #format = "%s\n%b"

  # Sort messages by urgency.
  sort = yes

  # Show how many messages are currently hidden (because of geometry).
  indicate_hidden = yes

  # Alignment of message text.
  # Possible values are "left", "center" and "right".
  alignment = center

  # Show age of message if message is older than show_age_threshold
  # seconds.
  # Set to -1 to disable.
  show_age_threshold = 60

  # Split notifications into multiple lines if they don't fit into
  # geometry.
  word_wrap = yes

  # Ignore newlines '\n' in notifications.
  ignore_newline = no

  # Shrink window if it's smaller than the width.  Will be ignored if
  # width is 0.
  shrink = no

  # The transparency of the window.  Range: [0; 100].
  # This option will only work if a compositing windowmanager is
  # present (e.g. xcompmgr, compiz, etc.).
  transparency = 0

  # Don't remove messages, if the user is idle (no mouse or keyboard input)
  # for longer than idle_threshold seconds.
  # Set to 0 to disable.
  idle_threshold = 120

  # Which monitor should the notifications be displayed on.
  monitor = 0

  # Display notification on focused monitor.  Possible modes are:
  #   mouse: follow mouse pointer
  #   keyboard: follow window with keyboard focus
  #   none: don't follow anything
  #
  # "keyboard" needs a windowmanager that exports the
  # _NET_ACTIVE_WINDOW property.
  # This should be the case for almost all modern windowmanagers.
  #
  # If this option is set to mouse or keyboard, the monitor option
  # will be ignored.
  follow = mouse

  # Should a notification popped up from history be sticky or timeout
  # as if it would normally do.
  sticky_history = yes

  # Maximum amount of notifications kept in history
  history_length = 50

  # Display indicators for URLs (U) and actions (A).
  show_indicators = yes

  # The height of a single line.  If the height is smaller than the
  # font height, it will get raised to the font height.
  # This adds empty space above and under the text.
  line_height = 0

  # Draw a line of "separatpr_height" pixel height between two
  # notifications.
  # Set to 0 to disable.
  separator_height = 2

  corner_radius= 1
  # Padding between text and separator.
  padding = 8

  # Horizontal padding.
  horizontal_padding = 8

  # Defines width in pixels of the frame around the notification.
  # Set to 0 to disable.
  frame_width = 3

  # Defines the color of the frame.
  frame_color = "{color5}"

  # Define a color for the separator.
  # possible values are:
  #  * auto: dunst tries to find a color fitting to the background;
  #  * foreground: use the same color as the foreground;
  #  * frame: use the same color as the frame;
  #  * anything else will be interpreted as a X color.
  separator_color = frame

  # dmenu path.
  dmenu = /usr/bin/rofi -dmenu -p dunst:
  # Browser for opening urls in context menu.
  browser = /usr/bin/firefox

  # Align icons left/right/off
  icon_position = left

  max_icon_size = 52
  icon_path = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/:/usr/share/icons/gnome/16x16/actions/:/usr/share/icons/gnome/16x16/places/:/usr/share/icons/gnome/16x16/apps/:/usr/share/icons/gnome/16x16/categories/

  # Defines action of mouse event
  # Possible values are:
  # * none: Don't do anything.
  # * do_action: If the notification has exactly one action, or one is marked as default,
  #              invoke it. If there are multiple and no default, open the context menu.
  # * close_current: Close current notification.
  # * close_all: Close all notifications.
  mouse_left_click = do_action
  mouse_middle_click = close_all
  mouse_right_click = close_current

[urgency_low]
  # IMPORTANT: colors have to be defined in quotation marks.
  # Otherwise the "#" and following would be interpreted as a comment.
  background = "{background}"
  foreground = "{color2}"
  timeout = 5
  icon = /usr/share/icons/oomox-xresources-reverse-flat/actions/scalable/dialog-ok.svg

[urgency_normal]
  background = "{background}"
  foreground = "{color4}"
  timeout = 5
  icon = /usr/share/icons/oomox-xresources-reverse-flat/actions/scalable/dialog-ok.svg

[urgency_critical]
  background = "{background}"
  foreground = "{color9}"
  timeout = 0
  icon = /usr/share/icons/oomox-xresources-reverse-flat/status/scalable/error.svg

# Every section that isn't one of the above is interpreted as a rules to
# override settings for certain messages.
# Messages can be matched by "appname", "summary", "body", "icon", "category",
# "msg_urgency" and you can override the "timeout", "urgency", "foreground",
# "background", "new_icon" and "format".
# Shell-like globbing will get expanded.
#
# SCRIPTING
# You can specify a script that gets run when the rule matches by
# setting the "script" option.
# The script will be called as follows:
#   script appname summary body icon urgency
# where urgency can be "LOW", "NORMAL" or "CRITICAL".
#
# NOTE: if you don't want a notification to be displayed, set the format
# to "".
# NOTE: It might be helpful to run dunst -print in a terminal in order
# to find fitting options for rules.

#[espeak]
#    summary = "*"
#    script = dunst_espeak.sh

#[script-test]
#    summary = "*script*"
#    script = dunst_test.sh

#[ignore]
#    # This notification will not be displayed
#    summary = "foobar"
#    format = ""

#[signed_on]
#    appname = Pidgin
#    summary = "*signed on*"
#    urgency = low
#
#[signed_off]
#    appname = Pidgin
#    summary = *signed off*
#    urgency = low
#
#[says]
#    appname = Pidgin
#    summary = *says*
#    urgency = critical
#
#[twitter]
# appname = Pidgin
# summary = *twitter.com*
# urgency = normal

# vim: ft=cfg
