#!/bin/sh

# ani-cli
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Project repository: https://github.com/pystardust/ani-cli

# Version number
VERSION="2.1.5"



#######################
# AUXILIARY FUNCTIONS #
#######################

help_text () {
	while IFS= read -r line; do
		printf "%s\n" "$line"
	done <<-EOF
	Usage:
	  ${0##*/} [-v] [-q <quality>] [-a <episode>] [-d | -p <download_dir>] [<query>]
	  ${0##*/} [-v] [-q <quality>] -c
	  ${0##*/} -h | -D | -U | -V
	Options:
	  -c continue watching anime from history
	  -a specify episode to watch
	  -h show helptext
	  -d download episode
	  -p download episode to specified directory
	  -q set video quality (best|worst|360|480|720|1080)
	  -v use VLC as the media player
	  -D delete history
	  -U fetch update from github
	  -V print version number and exit
	Episode selection:
	  Multiple episodes can be chosen given a range
	    Choose episode [1-13]: 1 6
	    This would choose episodes 1 2 3 4 5 6
		To select the last episode use -1
	  When selecting non-interactively, the first result will be
	  selected, if anime is passed
	EOF
}

version_text () {
	inf "Version: $VERSION" >&2
}

die () {
	err "$*"
	exit 1
}

# get the newest version of this script from github and replace it
update_script () {
	update="$(curl -s "https://raw.githubusercontent.com/pystardust/ani-cli/master/ani-cli" | diff -u "$0" -)"
	if [ -z "$update" ]; then
		inf "Script is up to date :)"
	else
		if printf '%s\n' "$update" | patch "$0" - ; then
			inf "Script has been updated"
		else
			die "Can't update for some reason!"
		fi
	fi
}

# checks if dependencies are present
dep_ch () {
	for dep; do
		if ! command -v "$dep" >/dev/null ; then
			err "Program \"$dep\" not found. Please install it."
			#aria2c is in the package aria2
			[ "$dep" = "aria2c" ] && err "To install aria2c, Type <your_package_manager> aria2"
			die
		fi
	done
}

download () {
case $2 in
	*mp4*)
		aria2c --summary-interval=0 -x 16 -s 16 --referer="$1" "$2" --dir="$download_dir" -o "${3}-${4}.mp4" --download-result=hide ;;
	*)
		ffmpeg -loglevel error -stats -referer "$1" -i "$2" -map "0:p:$((idx-1))?" -c copy "$download_dir/${3}-${4}.mp4" ;;
esac
}

#############
# SEARCHING #
#############

# gets anime names along with its id for search term
search_anime () {
	search=$(printf '%s' "$1" | tr ' ' '-' )
	curl -s "$base_url/search.html" -G -d "keyword=$search" |
		sed -nE 's_^[[:space:]]*<a href="/videos/([^"]*)">_\1_p'
}

# searches on gogoanime (instead of gogoplay) because they index english titles
extended_search () {
	indexing_url=$(curl -s -L -o /dev/null -w "%{url_effective}\n" https://gogoanime.cm)
	search=$(printf '%s' "$1" | tr ' ' '-' )
	curl -s "$indexing_url//search.html" -G -d "keyword=$search" |
		sed -n -E 's_^[[:space:]]*<a href="/category/([^"]*)" title="([^"]*)".*_\1_p'
}

#check no of episodes in an anime
check_episode () {
	data=$(curl -s "$base_url/videos/$1")
	del=$(printf "%s" "$data" | grep -n "Latest Episodes" | cut -d ":" -f1)
	[ -n "$del" ] && printf "%s" "$data" | sed "$del,$ d" | sed -nE "s_^[[:space:]]*<a href.*videos/${2}(.*)\">_\1_p"
}

process_hist_entry () {
	temp_anime_id=$(printf "%s" "$anime_id" | sed 's/[0-9]*.$//')
	latest_ep=$(printf "%s" "$anime_id" | sed "s/$temp_anime_id//g")
	current_ep=$(check_episode "$anime_id" "$temp_anime_id" | head -n 1)
	if [ -n "$current_ep" ] && [ "$current_ep" -ge "$latest_ep" ]; then
		printf "%s\n" "$anime_id"
	fi
}

# compares history with gogoplay, only shows unfinished anime
search_history () {
	tput clear
	[ ! -s "$logfile" ] && die "History is empty"
	search_results=$(while read -r anime_id; do process_hist_entry & done < "$logfile"; wait)
	[ -z "$search_results" ] && die "No unwatched episodes"
	one_hist=$(printf '%s\n' "$search_results" | grep -e "$" -c)
	[ "$one_hist" = 1 ] && select_first=1
	anime_selection "$search_results"
	ep_choice_start=$(sed -n -E "s/${selection_id}(.*)/\1/p" "$logfile")
}

##################
# URL PROCESSING #
##################

#update main url to latest one
updateurl () {
	prev_url=$(printf "%s" "$base_url" | cut -d"/" -f3)
	new_url=$(printf "%s" "$dpage_link" | cut -d"/" -f3)
	[ "$prev_url" != "$new_url" ] && printf "%s" "$new_url" > "$urlfile"
}

# get the download page url
get_dpage_link() {
	anime_id="$1"
	ep_no="$2"

	curl -s "$base_url/videos/${anime_id}${ep_no}" | sed -nE 's_^[[:space:]]*<iframe src="([^"]*)".*_\1_p' |
		sed 's/^/https:/g'
}

decrypt_link() {
	ajax_url="$base_url/encrypt-ajax.php"
	id=$(printf "%s" "$1" | sed -nE 's/.*id=(.*)&title.*/\1/p')
	resp=$(curl -s "$1")
	secret_key=$(printf "%s" "$resp" | sed -nE 's/.*class="container-(.*)">/\1/p' | tr -d "\n" | od -A n -t x1 | tr -d " |\n")
	iv=$(printf "%s" "$resp" | sed -nE 's/.*class="wrapper container-(.*)">/\1/p' | tr -d "\n" | od -A n -t x1 | tr -d " |\n")
	second_key=$(printf "%s" "$resp" | sed -nE 's/.*class=".*videocontent-(.*)">/\1/p' | tr -d "\n" | od -A n -t x1 | tr -d " |\n")
	token=$(printf "%s" "$resp" | sed -nE 's/.*data-value="(.*)">.*/\1/p' | base64 -d | openssl enc -d -aes256 -K "$secret_key" -iv "$iv" | sed -nE 's/.*&(token.*)/\1/p')
	ajax=$(printf '%s' "$id" | openssl enc -e -aes256 -K "$secret_key" -iv "$iv" | base64)
	data=$(curl -s -H "X-Requested-With:XMLHttpRequest" "${ajax_url}?id=${ajax}&alias=${id}&${token}" | sed -e 's/{"data":"//' -e 's/"}/\n/' -e 's/\\//g')
	printf '%s' "$data" | base64 -d | openssl enc -d -aes256 -K "$second_key" -iv "$iv" | sed -e 's/\].*/\]/' -e 's/\\//g' |
		grep -Eo 'https:\/\/[-a-zA-Z0-9@:%._\+~#=][a-zA-Z0-9][-a-zA-Z0-9@:%_\+.~#?&\/\/=]*'
}

# chooses the link for the set quality
get_video_link() {
	dpage_url="$1"
	video_links=$(decrypt_link "$dpage_url")
	if printf '%s' "$video_links" | grep -q "mp4"; then 
		video_url=$(get_video_quality_mp4 "$video_links")
		idx=1
	else
		video_url="$video_links"
		get_video_quality_m3u8
	fi
}	

get_video_quality_mp4() {
	case $quality in
		best)
			video_url=$(printf '%s' "$1" | head -n 4 | tail -n 1) ;;
		worst)
			video_url=$(printf '%s' "$1" | head -n 1) ;;
		*)
			video_url=$(printf '%s' "$1" | grep -i "${quality}p" | head -n 1)
			if [ -z "$video_url" ]; then
				err "Current video quality is not available (defaulting to best quality)"
				quality=best
				video_url=$(printf '%s' "$1" | head -n 4 | tail -n 1)
			fi
			;;
	esac
	printf '%s' "$video_url"
}

get_video_quality_m3u8() { 
	m3u8_links=$(curl -s --referer "$dpage_link" "$video_url" | sed 's/#.*$//' | sed '/^[[:space:]]*$/d')
	links_count=$(printf '%s' "$m3u8_links" | wc -w)
	case $quality in
		worst|360)
			idx=2 ;;
		480)
			idx=3 ;;
		720)
			idx=1 ;;
		1080)
			idx=5 ;;
		best|*)
			idx="$links_count" ;;
	esac
	if [ "$idx" -lt 1 ] || [ "$idx" -gt "$links_count" ];then
		err "Current video quality is not available (defaulting to best quality)"		 
		idx="$links_count"
	fi
	printf '%s' "$video_url" | grep -qE "gogocdn.*m3u.*" && idx=$((idx-1))
}


###############
# TEXT OUTPUT #
###############

# display an error message to stderr (in red)
err () {
	printf "\033[1;31m%s\033[0m\n" "$*" >&2
}

# display an informational message (first argument in green, second in magenta)
inf () {
	printf "\033[1;35m%s \033[1;35m%s\033[0m\n" "$1" "$2"
}

# prompts the user with message in $1-2 ($1 in blue, $2 in magenta) and saves the input to the variables in $REPLY and $REPLY2
prompt () {
	printf "\033[1;35m%s\033[1;35m%s\033[1;34m\033[0m" "$1" "$2"
	read -r REPLY REPLY2
}

# displays an even (cyan) line of a menu line with $2 as an indicator in () and $1 as the option
menu_line_even () {
	printf "\033[1;36m(\033[1;36m%s\033[1;36m) \033[1;36m%s\033[0m\n" "$2" "$1"
}

# displays an odd (yellow) line of a menu line with $2 as an indicator in () and $1 as the option
menu_line_odd() {
	printf "\033[1;33m(\033[1;33m%s\033[1;33m) \033[1;33m%s\033[0m\n" "$2" "$1"
}

# display alternating menu lines (even and odd)
menu_line_alternate() {
	menu_line_parity=${menu_line_parity:-0}
	if [ "$menu_line_parity" -eq 0 ]; then
		menu_line_odd "$1" "$2"
		menu_line_parity=1
	else
		menu_line_even "$1" "$2"
		menu_line_parity=0
	fi
}

# displays a warning (red) line of a menu line with $2 as an indicator in [] and $1 as the option
menu_line_strong() {
	printf "\033[1;31m(\033[1;31m%s\033[1;31m) \033[1;31m%s\033[0m\n" "$2" "$1"
}


#################
# INPUT PARSING #
#################

# only lets the user pass in case of a valid search
process_search () {
	search_results=$(search_anime "$query")
	while [ -z "$search_results" ]; do
		extended_search_results=$(extended_search "$query")
		if [ -n "$extended_search_results" ]; then
			extended_search_results=$(printf '%s' "$extended_search_results" | head -n 1)
			search_results=$(search_anime "$extended_search_results")
			break
		fi
		err 'No search results found'
		prompt 'Search Anime: '
		query="$REPLY $REPLY2"
		search_results=$(search_anime "$query")
	done
	anime_selection "$search_results"
	episode_selection
}

# anime-selection menu handling function
anime_selection () {
	count=1
	while read -r anime_id; do
	displayed_title="$(printf '%s' "$anime_id" | tr '-' ' ' | awk '{for(i=1;i<=NF-2;i++) printf $i" "; print "("$(NF-1), $NF")"}' \
		| awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')"
		menu_line_alternate "$displayed_title" "$count"
		: $((count+=1))
	done <<-EOF
	$search_results
	EOF
	if [ -n "$select_first" ]; then
		tput clear
		choice=1
	elif [ -z "$ep_choice_to_start" ] || { [ -n "$ep_choice_to_start" ] && [ -z "$select_first" ]; }; then
		menu_line_strong "exit" "q"
		prompt "> "
		choice="$REPLY"
		while ! [ "$choice" -eq "$choice" ] 2>/dev/null || [ "$choice" -lt 1 ] || [ "$choice" -ge "$count" ] || [ "$choice" = " " ]; do
			[ "$choice" = "q" ] && exit 0
			err "Invalid choice entered"
			prompt "> "
			choice="$REPLY"
		done
	fi
	# Select respective anime_id
	selection_id="$(printf "%s" "$search_results" | sed -n "${choice}p")"
	temp_anime_id=$(printf "%s" "$selection_id" | sed 's/[0-9]*.$//')
	select_ep_result=$(check_episode "$selection_id" "$temp_anime_id")
	last_ep_number=$(printf "%s" "$select_ep_result" | head -n 1)
	first_ep_number=$(printf "%s" "$select_ep_result" | tail -n 1)
	selection_id=$temp_anime_id
}

# gets episode number from user, makes sure it's in range, skips input if only one episode exists
episode_selection () {
	if [ "$last_ep_number" -eq 0 ]; then
		die "Episodes not released yet!"
	fi
	if [ "$last_ep_number" -gt "$first_ep_number" ]; then
		[ "$ep_choice_to_start" = "-1" ] && ep_choice_to_start="$last_ep_number"
		if [ -z "$ep_choice_to_start" ]; then
			# if branches, because order matters this time
			while : ; do
				inf "To specify a range, use: start_number end_number"
				inf "Episodes:" "($first_ep_number-$last_ep_number)"
				prompt "> "
				ep_choice_start="$REPLY"
				ep_choice_end="$REPLY2"
				if [ "$REPLY" = q ]; then
					exit 0
				fi
				[ "$ep_choice_start" = "-1" ] && ep_choice_start="$last_ep_number"
				[ "$ep_choice_end" = "-1" ] && ep_choice_end="$last_ep_number"
				if ! [ "$ep_choice_start" -eq "$ep_choice_start" ] 2>/dev/null || { [ -n "$ep_choice_end" ] && ! [ "$ep_choice_end" -eq "$ep_choice_end" ] 2>/dev/null; }; then
					err "Invalid number(s)"
					continue
				fi
				if [ "$ep_choice_start" -gt "$last_ep_number" ] 2>/dev/null || [ "$ep_choice_end" -gt "$last_ep_number" ] 2>/dev/null || [ "$ep_choice_start" -lt "$first_ep_number" ] 2>/dev/null; then
					err "Episode out of range"
					continue
				fi
				if [ "$ep_choice_end" -le "$ep_choice_start" ]; then
					err "Invalid range"
					continue
				fi
				break
			done
		else
			ep_choice_start="$ep_choice_to_start" && unset ep_choice_to_start
		fi
	else
		# In case the anime contains only a single episode
		ep_choice_start=1
	fi
	if [ -z "$ep_choice_end" ]; then
		auto_play=0
	else
		auto_play=1
	fi
}

# creates $episodes from $ep_choice_start and $ep_choice_end
generate_ep_list() {
	episodes=$ep_choice_start
	[ -n "$ep_choice_end" ] && episodes=$(seq "$ep_choice_start" "$ep_choice_end")
}


##################
# VIDEO PLAYBACK #
##################

append_history () { # todo: unite this with the temporary histfile writing
	grep -q "${selection_id}" "$logfile" || printf "%s%s\n" "$selection_id" $((episode+1)) >> "$logfile"
}

# opens selected episodes one-by-one
open_selection() {
	for ep in $episodes; do
		open_episode "$selection_id" "$ep"
	done
	episode=${ep_choice_end:-$ep_choice_start}
}

open_episode () {
	anime_id="$1"
	episode="$2"

	tput clear
	inf "Loading episode $episode..."
	# decrypting url
	dpage_link=$(get_dpage_link "$anime_id" "$episode")
	if [ -z "$dpage_link" ];then
		err "Episode doesn't exist!!"
	else
		get_video_link "$dpage_link"
	fi
	if [ "$is_download" -eq 0 ]; then
		# write anime and episode number and save to temporary history
		sed -E "
			s/^${selection_id}[0-9]*/${selection_id}$((episode+1))/
		" "$logfile" > "${logfile}.new"
		[ ! "$PID" = "0" ] && kill "$PID" >/dev/null 2>&1
		[ -z "$video_url" ] && die "Video URL not found"
		play_episode
		# overwrite history with temporary history
		mv "${logfile}.new" "$logfile"
	else
		mkdir -p "$download_dir"
		inf "Downloading episode $episode ..."
		episode=$(printf "%03d" "$episode")
		{
			if download "$dpage_link" "$video_url" "$anime_id" "$episode"; then
				inf "Downloaded episode: $episode"
			else
				err "Download failed episode: $episode , please retry or check your internet connection"
			fi
		}
	fi
}

play_episode () {
	# Build command
	set -- "$player_fn" "$video_url"
	case "$player_fn" in
		vlc)
			[ ! "$auto_play" -eq 0 ] && set -- "$@" "--play-and-exit"
			set -- "$@" --http-referrer="$dpage_link"
			;;
		*)
			trackma_title="$(printf '%s' "$anime_id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) }}1')"
			set -- "$@" --vid="$idx" --referrer="$dpage_link" --force-media-title="$trackma_title $episode"
			;;
	esac
	# Run Command
	if [ "$auto_play" -eq 0 ]; then
		nohup "$@" > /dev/null 2>&1 &
	else
		inf "Currently playing $display_name episode" "$episode/$last_ep_number, Range: $ep_choice_start-$ep_choice_end"
		"$@" > /dev/null 2>&1
		sleep 2
	fi
	PID=$!
}


############
# START UP #
############

# clears the colors and deletes temporary logfile when exited using SIGINT
trap 'printf "\033[0m";[ -f "$logfile".new ] && rm "$logfile".new;exit 1' INT HUP

# default options
player_fn="mpv" #video player needs to be able to play urls
is_download=0
PID=0
quality=best
scrape=query
download_dir="."
choice=
auto_play=0
# history file path
logfile="${XDG_CACHE_HOME:-$HOME/.cache}/ani-hsts"
urlfile="${XDG_CACHE_HOME:-$HOME/.cache}/ani-url"
logdir="${XDG_CACHE_HOME:-$HOME/.cache}"

# create history file and history dir if none found
[ -d "$logdir" ] || mkdir "$logdir"
[ -f "$logfile" ] || : > "$logfile"

while getopts 'vq:dp:chDUVa:' OPT; do
	case $OPT in
		d)
			is_download=1 ;;
		a)
			ep_choice_to_start=$OPTARG ;;
		D)
			: > "$logfile"
			exit 0
			;;
		p)
			is_download=1
			download_dir=$OPTARG
			;;
		q)
			quality=$OPTARG ;;
		c)
			scrape=history ;;
		v)
			player_fn="vlc" ;;
		U)
			update_script
			exit 0
			;;
		V)
			version_text
			exit 0
			;;
		*)
			help_text
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))

dep_ch "curl" "sed" "grep" "openssl"
if [ "$is_download" -eq 0 ]; then
	dep_ch "$player_fn"
else
	dep_ch "aria2c" "ffmpeg"
fi

base_url="https://goload.pro"
case $scrape in
	query)
		if [ -z "$*" ]; then
			prompt "Search Anime: "
			query="$REPLY $REPLY2"
		else
			if [ -n "$ep_choice_to_start" ]; then
				REPLY=1
				select_first=1
			fi
			query="$*"
		fi
		process_search
		;;
	history)
		search_history
		[ "$REPLY" = "q" ] && exit 0
		;;
	*)
		die "Unexpected scrape type"
esac

generate_ep_list
append_history
open_selection
updateurl &


########
# LOOP #
########

while :; do
if [ -z "$select_first" ]; then
	if [ "$auto_play" -eq 0 ]; then
		display_name=$(printf '%s' "$selection_id" | sed 's/-episode-//')
		inf "Currently playing $display_name episode" "$episode/$last_ep_number"
	else
		auto_play=0
	fi
	[ "$episode" -ne "$last_ep_number" ] && menu_line_alternate 'next' 'n'
	[ "$episode" -ne "$first_ep_number" ] && menu_line_alternate 'previous' 'p'
	menu_line_alternate "replay" "r"
	[ "$last_ep_number" -ne "$first_ep_number" ] && menu_line_alternate 'select' 's'
	menu_line_strong "exit" "q"
	prompt "> "
	choice="$REPLY"
	case $choice in
		n)
			ep_choice_start=$((episode + 1))
			unset ep_choice_end
			;;
		p)
			ep_choice_start=$((episode - 1))
			unset ep_choice_end
			;;
		r)
			ep_choice_start="$episode"
			unset ep_choice_end
			;;
		s)
			episode_selection ;;
		q)
			break ;;
		*)
			tput clear
			err "Invalid choice"
			continue
			;;
	esac
	generate_ep_list
	append_history
	open_selection
else
	wait $!
	exit
fi
done

