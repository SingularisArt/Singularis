#!/usr/bin/perl
package DiffHighlight;

use 5.008;
use warnings FATAL => 'all';
use strict;

# Use the correct value for both UNIX and Windows (/dev/null vs nul)
use File::Spec;

my $NULL = File::Spec->devnull();

# Highlight by reversing foreground and background. You could do
# other things like bold or underline if you prefer.
my @OLD_HIGHLIGHT = (
	# HACK: use Git color names here instead of ANSI codes
	color_config('color.diff-highlight.oldnormal', 'normal'),
	color_config('color.diff-highlight.oldhighlight', 'reverse'),
	color_config('color.diff-highlight.oldreset', 'noreverse')
);
my @NEW_HIGHLIGHT = (
	color_config('color.diff-highlight.newnormal', $OLD_HIGHLIGHT[0]),
	color_config('color.diff-highlight.newhighlight', $OLD_HIGHLIGHT[1]),
	color_config('color.diff-highlight.newreset', $OLD_HIGHLIGHT[2])
);

# HACK
# On 24-bit color support, see:
# https://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences
# iTerm support: https://gist.github.com/XVilka/8346728
my @COLORS= (
	color_config('color.diff.context', 'white'),
	color_config('color.diff.old', 'red'),
	color_config('color.diff.new', 'green')
);

my $RESET = "\x1b[m";
my $COLOR = qr/\x1b\[[0-9;]*m/;
my $BORING = qr/$COLOR|\s/;

my @removed;
my @added;
my $in_hunk;
my $graph_indent = 0;

our $line_cb = sub { print @_ };
our $flush_cb = sub { local $| = 1 };

# Count the visible width of a string, excluding any terminal color sequences.
sub visible_width {
	local $_ = shift;
	my $ret = 0;
	while (length) {
		if (s/^$COLOR//) {
			# skip colors
		} elsif (s/^.//) {
			$ret++;
		}
	}
	return $ret;
}

# Return a substring of $str, omitting $len visible characters from the
# beginning, where terminal color sequences do not count as visible.
sub visible_substr {
	my ($str, $len) = @_;
	while ($len > 0) {
		if ($str =~ s/^$COLOR//) {
			next
		}
		$str =~ s/^.//;
		$len--;
	}
	return $str;
}

sub handle_line {
	my $orig = shift;
	local $_ = $orig;

	# match a graph line that begins a commit
	if (/^(?:$COLOR?\|$COLOR?[ ])* # zero or more leading "|" with space
	         $COLOR?\*$COLOR?[ ]   # a "*" with its trailing space
	      (?:$COLOR?\|$COLOR?[ ])* # zero or more trailing "|"
	                         [ ]*  # trailing whitespace for merges
	    /x) {
	        my $graph_prefix = $&;

		# We must flush before setting graph indent, since the
		# new commit may be indented differently from what we
		# queued.
		flush();
		$graph_indent = visible_width($graph_prefix);

	} elsif ($graph_indent) {
		if (length($_) < $graph_indent) {
			$graph_indent = 0;
		} else {
			$_ = visible_substr($_, $graph_indent);
		}
	}

	# HACK
	if ($in_hunk && !/^$COLOR*[-+]/) {
		# TODO: should make this actually align on tab-stops instead of assuming 4
		# characters.

		# Dark gray
		$orig =~ s/\t/\x1b[38;5;238m▷┅┅┅$COLORS[0]/g;
	}

	if (!$in_hunk) {
		$line_cb->($orig);
		$in_hunk = /^$COLOR*\@\@ /;
	}
	elsif (/^$COLOR*-/) {
		# HACK: for some reason there is a reset after "+" but not "-",
		# which causes tabs to appear as white in added lines.

		# Darkish red.
		$orig =~ s/\t/\x1b[38;2;84;0;0m▷┅┅┅$COLORS[1]/g;

		# BUG: if I append $RESET here I get mismatched filter error here sometimes
		$orig = $NEW_HIGHLIGHT[0] . $orig;

		push @removed, $orig;
	}
	elsif (/^$COLOR*\+/) {
		# HACK: for some reason there is a reset after "+" but not "-",
		# which causes tabs to appear as white in added lines.

		# Darkish green.
		$orig =~ s/\t/\x1b[38;2;0;46;0m▷┅┅┅$COLORS[2]/g;

		# BUG: if I append $RESET here I get mismatched filter error here sometimes
		$orig = $NEW_HIGHLIGHT[0] . $orig;

		push @added, $orig;
	}
	else {
		flush();
		$line_cb->($orig);
		$in_hunk = /^$COLOR*[\@ ]/;
	}

	$flush_cb->();
}

sub flush {
	# Flush any queued hunk (this can happen when there is no trailing
	# context in the final diff of the input).
	show_hunk(\@removed, \@added);
	@removed = ();
	@added = ();
}

sub highlight_stdin {
	while (<STDIN>) {
		handle_line($_);
	}
	flush();
}

# HACK: Depend on Git to turn $default color names into escape sequences.
sub color_config {
	my ($key, $default) = @_;
	my $s = `git config --get-color $key $default 2>$NULL`;
	return length($s) ? $s : '';
}

sub show_hunk {
	my ($a, $b) = @_;

	# If one side is empty, then there is nothing to compare or highlight.
	if (!@$a || !@$b) {
		$line_cb->(@$a, @$b);
		return;
	}

	# If we have mismatched numbers of lines on each side, we could try to
	# be clever and match up similar lines. But for now we are simple and
	# stupid, and only handle multi-line hunks that remove and add the same
	# number of lines.
	if (@$a != @$b) {
		$line_cb->(@$a, @$b);
		return;
	}

	my @queue;
	for (my $i = 0; $i < @$a; $i++) {
		$line_cb->($a->[$i]);
		push @queue, $b->[$i];
	}
	$line_cb->(@queue);
}

package main;

# Some scripts may not realize that SIGPIPE is being ignored when launching the
# pager--for instance scripts written in Python.
$SIG{PIPE} = 'DEFAULT';

DiffHighlight::highlight_stdin();
exit 0;
